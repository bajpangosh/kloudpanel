#!/usr/bin/env python3

"""
KloudPanel - LiteSpeed Hosting Control Panel
Main application file
"""

import os
import sys
import logging
from flask import Flask, render_template, jsonify, request
from werkzeug.security import check_password_hash
import mysql.connector
import configparser
import subprocess

# Initialize Flask app with minimal memory footprint
app = Flask(__name__, 
    template_folder='/usr/local/kloudpanel/templates',
    static_folder='/usr/local/kloudpanel/www/static')

# Disable debug mode to reduce memory usage
app.debug = False

# Load configuration
config = configparser.ConfigParser()
config.read('/usr/local/kloudpanel/config/panel.conf')

# Configure logging to file instead of memory
logging.basicConfig(
    filename=os.path.join(config['paths']['logs'], 'panel.log'),
    level=logging.WARNING,  # Use WARNING instead of INFO to reduce log size
    format='%(asctime)s - %(levelname)s - %(message)s'
)

# Use connection pooling for database to reduce memory usage
def get_db():
    return mysql.connector.connect(
        host=config['database']['host'],
        user=config['database']['user'],
        password=config['database']['password'],
        database=config['database']['name'],
        pool_name='kloudpanel_pool',
        pool_size=5
    )

# Routes
@app.route('/')
def dashboard():
    return render_template('dashboard.html')

# API Routes for Sites
@app.route('/api/sites', methods=['GET'])
def get_sites():
    try:
        result = subprocess.run(['ls', '/usr/local/lsws/conf/vhosts'], 
                              capture_output=True, text=True)
        sites = [s.replace('.conf', '') for s in result.stdout.split()]
        return jsonify(sites)
    except Exception as e:
        return jsonify({'error': str(e)}), 500

@app.route('/api/sites', methods=['POST'])
def create_site():
    try:
        data = request.json
        domain = data.get('domain')
        
        # Create vhost directory
        os.makedirs(f'/var/www/{domain}', exist_ok=True)
        
        # Create vhost config
        vhost_config = f"""
docRoot                   $VH_ROOT
enableGzip               1

index  {{
    useServer               0
    indexFiles             index.php, index.html
}}

context / {{
    location                /var/www/{domain}
    allowBrowse            1
    
    rewrite  {{
        enable              1
        rules               <<<END_rules
rewrite ^(.*) https://%{{HTTP_HOST}}%{{REQUEST_URI}} [R=301,L]
        END_rules
    }}
}}
"""
        with open(f'/usr/local/lsws/conf/vhosts/{domain}.conf', 'w') as f:
            f.write(vhost_config)
        
        # Restart OpenLiteSpeed
        subprocess.run(['/usr/local/lsws/bin/lswsctrl', 'restart'])
        
        return jsonify({'status': 'success'})
    except Exception as e:
        return jsonify({'error': str(e)}), 500

# API Routes for SSL
@app.route('/api/ssl/<domain>', methods=['POST'])
def install_ssl(domain):
    try:
        # Install certbot if not installed
        subprocess.run(['apt-get', 'install', '-y', 'certbot'])
        
        # Get SSL certificate
        subprocess.run(['certbot', 'certonly', '--webroot', 
                       '-w', f'/var/www/{domain}', 
                       '-d', domain, '--non-interactive', '--agree-tos'])
        
        return jsonify({'status': 'success'})
    except Exception as e:
        return jsonify({'error': str(e)}), 500

# API Routes for System Stats
@app.route('/api/stats')
def get_stats():
    try:
        # CPU usage
        cpu = subprocess.run(['top', '-bn1'], capture_output=True, text=True)
        cpu_usage = float(cpu.stdout.split('Cpu(s):')[1].split('%')[0].strip())
        
        # Memory usage
        mem = subprocess.run(['free', '-m'], capture_output=True, text=True)
        total_mem = int(mem.stdout.split('\n')[1].split()[1])
        used_mem = int(mem.stdout.split('\n')[1].split()[2])
        mem_usage = (used_mem / total_mem) * 100
        
        return jsonify({
            'cpu': cpu_usage,
            'memory': mem_usage,
            'sites': len(get_sites().json)
        })
    except Exception as e:
        return jsonify({'error': str(e)}), 500

if __name__ == '__main__':
    app.run(host='0.0.0.0', 
           port=8443, 
           ssl_context='adhoc')
